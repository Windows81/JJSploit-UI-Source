{"version":3,"sources":["../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js","../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_0__","wordPattern","comments","lineComment","blockComment","brackets","onEnterRules","beforeText","afterText","action","indentAction","IndentAction","IndentOutdent","appendText","None","removeText","autoClosingPairs","open","close","notIn","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","root","include","common","cases","@keywords","@default","token","bracket","next","@operators","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single","string_backtick","bracketCounting","_typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__","typeKeywords"],"mappings":"6FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAAA,IAAAC,EAAAN,EAAA,KAKOI,EAAA,CACPG,YAAA,uFACAC,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,qBACrBC,aAAA,EAEAC,WAAA,qCACAC,UAAA,YACAC,OAAA,CACAC,aAAoBV,EAAA,EAASW,aAAAC,cAC7BC,WAAA,QAEG,CAEHN,WAAA,qCACAE,OAAA,CACAC,aAAoBV,EAAA,EAASW,aAAAG,KAC7BD,WAAA,QAEG,CAEHN,WAAA,2CACAE,OAAA,CACAC,aAAoBV,EAAA,EAASW,aAAAG,KAC7BD,WAAA,OAEG,CAEHN,WAAA,0BACAE,OAAA,CACAC,aAAoBV,EAAA,EAASW,aAAAG,KAC7BC,WAAA,KAGAC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,YACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,MACAC,MAAA,MACAC,MAAA,aAEAC,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,0BACAC,IAAA,IAAAD,OAAA,gCAIOxB,EAAA,CAEP0B,aAAA,UACAC,aAAA,MACAC,SAAA,CAEA,mpBACAC,UAAA,mNAEAC,QAAA,wBACAC,QAAA,wEACAC,OAAA,cACAC,YAAA,oBACAC,aAAA,oBACAC,UAAA,iCACAC,UAAA,yBACAC,UAAA,+EAEAC,UAAA,CACAC,KAAA,SAAgB,sBAChBC,QAAA,WAEAC,OAAA,CACA,kBACAC,MAAA,CACAC,YAAA,UACAC,WAAA,gBAEK,mCAEL,CACAJ,QAAA,eAEA,8DAA4D,CAC5DK,MAAA,SACAC,QAAA,QACAC,KAAA,YAEA,qGACAL,MAAA,CACAM,aAAA,YACAJ,WAAA,MAGA,oQACA,SAAQ,aACR,6KACAK,WAAA,gHACAC,QAAA,sEACAC,MAAA,kFAEAC,OAAA,2BAAoC,wIACpCP,MAAA,wBACAE,KAAA,iBACK,oPACLF,MAAA,SACAC,QAAA,SACAC,KAAA,QACK,mBACLM,WAAA,gHACAR,MAAA,wBACAE,KAAA,OACAD,QAAA,YAEAQ,cAAA,0GACAC,cAAA,0GACAC,gBAAA,SAA4B,CAC5BX,MAAA,oBACAE,KAAA,qBACK,0GACLU,gBAAA,OAA0B,8CAAiD,6BAC3EjB,QAAA,+CClJA7C,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAAA,IAAA0D,EAAA/D,EAAA,KAKOI,EAAW2D,EAAA,KACX1D,EAAA,CAEP0B,aAAA,UACAC,aAAA,MACAC,SAAA,qXACA+B,aAAA,GACA9B,UAAa6B,EAAA,SAAU7B,UACvBC,QAAW4B,EAAA,SAAU5B,QACrBC,QAAW2B,EAAA,SAAU3B,QACrBC,OAAU0B,EAAA,SAAU1B,OACpBC,YAAeyB,EAAA,SAAUzB,YACzBC,aAAgBwB,EAAA,SAAUxB,aAC1BC,UAAauB,EAAA,SAAUvB,UACvBC,UAAasB,EAAA,SAAUtB,UACvBC,UAAaqB,EAAA,SAAUrB,UACvBC,UAAaoB,EAAA,SAAUpB","file":"static/js/5.ce6eed70.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  onEnterRules: [{\n    // e.g. /** | */\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    afterText: /^\\s*\\*\\/$/,\n    action: {\n      indentAction: languages.IndentAction.IndentOutdent,\n      appendText: ' * '\n    }\n  }, {\n    // e.g. /** ...|\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    action: {\n      indentAction: languages.IndentAction.None,\n      appendText: ' * '\n    }\n  }, {\n    // e.g.  * ...|\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n    action: {\n      indentAction: languages.IndentAction.None,\n      appendText: '* '\n    }\n  }, {\n    // e.g.  */|\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n    action: {\n      indentAction: languages.IndentAction.None,\n      removeText: 1\n    }\n  }],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }, {\n    open: '`',\n    close: '`',\n    notIn: ['string', 'comment']\n  }, {\n    open: '/**',\n    close: ' */',\n    notIn: ['string']\n  }],\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*//\\\\s*#?region\\\\b'),\n      end: new RegExp('^\\\\s*//\\\\s*#?endregion\\\\b')\n    }\n  }\n};\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.ts',\n  keywords: [// Should match the keys of textToKeywordObj in\n  // https://github.com/microsoft/TypeScript/blob/master/src/compiler/scanner.ts\n  'abstract', 'any', 'as', 'asserts', 'bigint', 'boolean', 'break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface', 'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'number', 'object', 'package', 'private', 'protected', 'public', 'override', 'readonly', 'require', 'global', 'return', 'set', 'static', 'string', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'type', 'typeof', 'undefined', 'unique', 'unknown', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],\n  operators: ['<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**', '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '??', '?', ':', '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', '@'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/[{}]/, 'delimiter.bracket'], {\n      include: 'common'\n    }],\n    common: [// identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }], [/[A-Z][\\w\\$]*/, 'type.identifier'], // [/[A-Z][\\w\\$]*/, 'identifier'],\n    // whitespace\n    {\n      include: '@whitespace'\n    }, // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n    [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([dgimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, {\n      token: 'regexp',\n      bracket: '@open',\n      next: '@regexp'\n    }], // delimiters and operators\n    [/[()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/!(?=([^=]|$))/, 'delimiter'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }], // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'], [/0[xX](@hexdigits)n?/, 'number.hex'], [/0[oO]?(@octaldigits)n?/, 'number.octal'], [/0[bB](@binarydigits)n?/, 'number.binary'], [/(@digits)n?/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string_double'], [/'/, 'string', '@string_single'], [/`/, 'string', '@string_backtick']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    jsdoc: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    // We match regular expression quite precisely\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', {\n      token: 'regexp.escape.control',\n      next: '@regexrange'\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']], [/[()]/, 'regexp.escape.control'], [/@regexpctl/, 'regexp.escape.control'], [/[^\\\\\\/]/, 'regexp'], [/@regexpesc/, 'regexp.escape'], [/\\\\\\./, 'regexp.invalid'], [/(\\/)([dgimsuy]*)/, [{\n      token: 'regexp',\n      bracket: '@close',\n      next: '@pop'\n    }, 'keyword.other']]],\n    regexrange: [[/-/, 'regexp.escape.control'], [/\\^/, 'regexp.invalid'], [/@regexpesc/, 'regexp.escape'], [/[^\\]]/, 'regexp'], [/\\]/, {\n      token: 'regexp.escape.control',\n      next: '@pop',\n      bracket: '@close'\n    }]],\n    string_double: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    string_single: [[/[^\\\\']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/'/, 'string', '@pop']],\n    string_backtick: [[/\\$\\{/, {\n      token: 'delimiter.bracket',\n      next: '@bracketCounting'\n    }], [/[^\\\\`$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/`/, 'string', '@pop']],\n    bracketCounting: [[/\\{/, 'delimiter.bracket', '@bracketCounting'], [/\\}/, 'delimiter.bracket', '@pop'], {\n      include: 'common'\n    }]\n  }\n};","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { conf as tsConf, language as tsLanguage } from '../typescript/typescript.js';\nexport var conf = tsConf;\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.js',\n  keywords: ['break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'default', 'delete', 'do', 'else', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'null', 'return', 'set', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'typeof', 'undefined', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],\n  typeKeywords: [],\n  operators: tsLanguage.operators,\n  symbols: tsLanguage.symbols,\n  escapes: tsLanguage.escapes,\n  digits: tsLanguage.digits,\n  octaldigits: tsLanguage.octaldigits,\n  binarydigits: tsLanguage.binarydigits,\n  hexdigits: tsLanguage.hexdigits,\n  regexpctl: tsLanguage.regexpctl,\n  regexpesc: tsLanguage.regexpesc,\n  tokenizer: tsLanguage.tokenizer\n};"],"sourceRoot":""}