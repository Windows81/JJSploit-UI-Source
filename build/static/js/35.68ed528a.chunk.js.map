{"version":3,"sources":["../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","@operators","@typeKeywords","@keywords","@default","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAIO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,WAGAC,SAAA,YACAC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAE,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,oCACAC,IAAA,IAAAD,OAAA,0CAIOX,EAAA,CAGPa,aAAA,SACAC,YAAA,EACAC,SAAA,uFACAC,aAAA,uDACAC,UAAA,+JAEAC,QAAA,wBAEAC,UAAA,CACAC,KAAA,CACA,+CACA,MACAC,MAAA,mBACAC,QAAA,QACAC,KAAA,uBACK,SACLF,MAAA,UACAC,QAAA,QACAC,KAAA,6BACK,UACLF,MAAA,UACAC,QAAA,QACAC,KAAA,YACK,MACLF,MAAA,YACAC,QAAA,QACAC,KAAA,6BAEA,kBACAC,MAAA,CACAC,aAAA,WACAC,gBAAA,eACAC,YAAA,UACAC,WAAA,gBAGA,CACAC,QAAA,eAEA,cAAS,uEACT,kIACA,SAAQ,cACRC,kBAAA,gCACAT,MAAA,mBACAC,QAAA,SACAC,KAAA,UAEAQ,8BAAA,yBACAV,MAAA,QACAE,KAAA,sBAEAS,wBAAA,EACAH,QAAA,eACK,MACLR,MAAA,YACAE,KAAA,qBACK,gCACLF,MAAA,YACAC,QAAA,SACAC,KAAA,UAEAU,gBAAA,iCACAZ,MAAA,YACAC,QAAA,SACAC,KAAA,UAEAW,OAAA,EACAL,QAAA,eACK,oCACLR,MAAA,gBACAC,QAAA,SACAC,KAAA,UAEAY,WAAA","file":"static/js/35.68ed528a.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  comments: {\n    lineComment: 'COMMENT' // blockComment: ['COMMENT', '.'],\n\n  },\n  brackets: [['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: ':',\n    close: '.'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '`',\n    close: '`'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: ':',\n    close: '.'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region'),\n      end: new RegExp('^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion')\n    }\n  }\n};\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  // defaultToken: 'invalid',\n  tokenPostfix: '.lexon',\n  ignoreCase: true,\n  keywords: ['lexon', 'lex', 'clause', 'terms', 'contracts', 'may', 'pay', 'pays', 'appoints', 'into', 'to'],\n  typeKeywords: ['amount', 'person', 'key', 'time', 'date', 'asset', 'text'],\n  operators: ['less', 'greater', 'equal', 'le', 'gt', 'or', 'and', 'add', 'added', 'subtract', 'subtracted', 'multiply', 'multiplied', 'times', 'divide', 'divided', 'is', 'be', 'certified'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// comment\n    [/^(\\s*)(comment:?(?:\\s.*|))$/, ['', 'comment']], // special identifier cases\n    [/\"/, {\n      token: 'identifier.quote',\n      bracket: '@open',\n      next: '@quoted_identifier'\n    }], ['LEX$', {\n      token: 'keyword',\n      bracket: '@open',\n      next: '@identifier_until_period'\n    }], ['LEXON', {\n      token: 'keyword',\n      bracket: '@open',\n      next: '@semver'\n    }], [':', {\n      token: 'delimiter',\n      bracket: '@open',\n      next: '@identifier_until_period'\n    }], // identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@operators': 'operator',\n        '@typeKeywords': 'keyword.type',\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, 'delimiter'], // numbers\n    [/\\d*\\.\\d*\\.\\d*/, 'number.semver'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F]+/, 'number.hex'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter']],\n    quoted_identifier: [[/[^\\\\\"]+/, 'identifier'], [/\"/, {\n      token: 'identifier.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    space_identifier_until_period: [[':', 'delimiter'], [' ', {\n      token: 'white',\n      next: '@identifier_rest'\n    }]],\n    identifier_until_period: [{\n      include: '@whitespace'\n    }, [':', {\n      token: 'delimiter',\n      next: '@identifier_rest'\n    }], [/[^\\\\.]+/, 'identifier'], [/\\./, {\n      token: 'delimiter',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    identifier_rest: [[/[^\\\\.]+/, 'identifier'], [/\\./, {\n      token: 'delimiter',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    semver: [{\n      include: '@whitespace'\n    }, [':', 'delimiter'], [/\\d*\\.\\d*\\.\\d*/, {\n      token: 'number.semver',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']]\n  }\n};"],"sourceRoot":""}