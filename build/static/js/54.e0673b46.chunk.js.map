{"version":3,"sources":["../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/qsharp/qsharp.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","keywords","typeKeywords","invalidKeywords","constants","builtin","operators","namespaceFollows","symbols","escapes","tokenizer","root","cases","@namespaceFollows","token","next","@typeKeywords","@keywords","@constants","@builtin","@invalidKeywords","@default","include","@operators","bracket","string","namespace","whitespace"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAIO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,MAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,uBAEAC,iBAAA,EACAH,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,OAGON,EAAA,CAEPS,SAAA,sWACAC,aAAA,kFACAC,gBAAA,0iBACAC,UAAA,kEACAC,QAAA,qMACAC,UAAA,8OACAC,iBAAA,qBACAC,QAAA,2BACAC,QAAA,WAEAC,UAAA,CACAC,KAAA,CACA,qBACAC,MAAA,CACAC,oBAAA,CACAC,MAAA,aACAC,KAAA,cAEAC,gBAAA,OACAC,YAAA,UACAC,aAAA,WACAC,WAAA,UACAC,mBAAA,UACAC,WAAA,gBAGA,CACAC,QAAA,eAEA,cAAS,0BACTV,MAAA,CACAW,aAAA,WACAF,WAAA,MAGA,6DACA,SAAQ,aAER,MACAP,MAAA,eACAU,QAAA,QACAT,KAAA,aAEAU,OAAA,yDACAX,MAAA,eACAU,QAAA,SACAT,KAAA,UAEAW,UAAA,EACAJ,QAAA,eACK,kEACLK,WAAA","file":"static/js/54.e0673b46.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  comments: {\n    lineComment: '//'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  keywords: ['namespace', 'open', 'as', 'operation', 'function', 'body', 'adjoint', 'newtype', 'controlled', 'if', 'elif', 'else', 'repeat', 'until', 'fixup', 'for', 'in', 'while', 'return', 'fail', 'within', 'apply', 'Adjoint', 'Controlled', 'Adj', 'Ctl', 'is', 'self', 'auto', 'distribute', 'invert', 'intrinsic', 'let', 'set', 'w/', 'new', 'not', 'and', 'or', 'use', 'borrow', 'using', 'borrowing', 'mutable'],\n  typeKeywords: ['Unit', 'Int', 'BigInt', 'Double', 'Bool', 'String', 'Qubit', 'Result', 'Pauli', 'Range'],\n  invalidKeywords: ['abstract', 'base', 'bool', 'break', 'byte', 'case', 'catch', 'char', 'checked', 'class', 'const', 'continue', 'decimal', 'default', 'delegate', 'do', 'double', 'enum', 'event', 'explicit', 'extern', 'finally', 'fixed', 'float', 'foreach', 'goto', 'implicit', 'int', 'interface', 'lock', 'long', 'null', 'object', 'operator', 'out', 'override', 'params', 'private', 'protected', 'public', 'readonly', 'ref', 'sbyte', 'sealed', 'short', 'sizeof', 'stackalloc', 'static', 'string', 'struct', 'switch', 'this', 'throw', 'try', 'typeof', 'unit', 'ulong', 'unchecked', 'unsafe', 'ushort', 'virtual', 'void', 'volatile'],\n  constants: ['true', 'false', 'PauliI', 'PauliX', 'PauliY', 'PauliZ', 'One', 'Zero'],\n  builtin: ['X', 'Y', 'Z', 'H', 'HY', 'S', 'T', 'SWAP', 'CNOT', 'CCNOT', 'MultiX', 'R', 'RFrac', 'Rx', 'Ry', 'Rz', 'R1', 'R1Frac', 'Exp', 'ExpFrac', 'Measure', 'M', 'MultiM', 'Message', 'Length', 'Assert', 'AssertProb', 'AssertEqual'],\n  operators: ['and=', '<-', '->', '*', '*=', '@', '!', '^', '^=', ':', '::', '..', '==', '...', '=', '=>', '>', '>=', '<', '<=', '-', '-=', '!=', 'or=', '%', '%=', '|', '+', '+=', '?', '/', '/=', '&&&', '&&&=', '^^^', '^^^=', '>>>', '>>>=', '<<<', '<<<=', '|||', '|||=', '~~~', '_', 'w/', 'w/='],\n  namespaceFollows: ['namespace', 'open'],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%@._]+/,\n  escapes: /\\\\[\\s\\S]/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// identifiers and keywords\n    [/[a-zA-Z_$][\\w$]*/, {\n      cases: {\n        '@namespaceFollows': {\n          token: 'keyword.$0',\n          next: '@namespace'\n        },\n        '@typeKeywords': 'type',\n        '@keywords': 'keyword',\n        '@constants': 'constant',\n        '@builtin': 'keyword',\n        '@invalidKeywords': 'invalid',\n        '@default': 'identifier'\n      }\n    }], // whitespace\n    {\n      include: '@whitespace'\n    }, // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'operator',\n        '@default': ''\n      }\n    }], // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\d+/, 'number'], // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], // strings\n    //[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n    [/\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@string'\n    }]],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    namespace: [{\n      include: '@whitespace'\n    }, [/[A-Za-z]\\w*/, 'namespace'], [/[\\.=]/, 'delimiter'], ['', '', '@pop']],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/(\\/\\/).*/, 'comment']]\n  }\n};"],"sourceRoot":""}