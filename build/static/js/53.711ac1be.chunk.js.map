{"version":3,"sources":["../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/python/python.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_0__","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","onEnterRules","beforeText","RegExp","action","indentAction","IndentAction","Indent","folding","offSide","markers","start","end","defaultToken","tokenPostfix","keywords","token","tokenizer","root","include","cases","@keywords","@default","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAAA,IAAAC,EAAAN,EAAA,KAKOI,EAAA,CACPG,SAAA,CACAC,YAAA,IACAC,aAAA,eAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,YACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,uBAEAC,iBAAA,EACAH,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAG,aAAA,EACAC,WAAA,IAAAC,OAAA,oFACAC,OAAA,CACAC,aAAoBd,EAAA,EAASe,aAAAC,UAG7BC,QAAA,CACAC,SAAA,EACAC,QAAA,CACAC,MAAA,IAAAR,OAAA,mBACAS,IAAA,IAAAT,OAAA,yBAIOb,EAAA,CACPuB,aAAA,GACAC,aAAA,UACAC,SAAA,CAIA,skCACApB,SAAA,EACAE,KAAA,IACAC,MAAA,IACAkB,MAAA,mBACG,CACHnB,KAAA,IACAC,MAAA,IACAkB,MAAA,qBACG,CACHnB,KAAA,IACAC,MAAA,IACAkB,MAAA,0BAEAC,UAAA,CACAC,KAAA,EACAC,QAAA,eACK,CACLA,QAAA,YACK,CACLA,QAAA,YACK,SAAQ,2BAAuB,sDACpCC,MAAA,CACAC,YAAA,UACAC,WAAA,iBAIAC,WAAA,6GACAC,aAAA,gFACAC,gBAAA,gFAEAC,QAAA,yGAEAC,QAAA,+IACAC,WAAA,yHACAC,cAAA","file":"static/js/53.711ac1be.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nexport var conf = {\n  comments: {\n    lineComment: '#',\n    blockComment: [\"'''\", \"'''\"]\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  onEnterRules: [{\n    beforeText: new RegExp('^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$'),\n    action: {\n      indentAction: languages.IndentAction.Indent\n    }\n  }],\n  folding: {\n    offSide: true,\n    markers: {\n      start: new RegExp('^\\\\s*#region\\\\b'),\n      end: new RegExp('^\\\\s*#endregion\\\\b')\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.python',\n  keywords: [// This section is the result of running\n  // `for k in keyword.kwlist: print('  \"' + k + '\",')` in a Python REPL,\n  // though note that the output from Python 3 is not a strict superset of the\n  // output from Python 2.\n  'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield', 'int', 'float', 'long', 'complex', 'hex', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'file', 'filter', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'id', 'input', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'locals', 'list', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'reversed', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'self', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip', '__dict__', '__methods__', '__members__', '__class__', '__bases__', '__name__', '__mro__', '__subclasses__', '__init__', '__import__'],\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.bracket'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }],\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, {\n      include: '@numbers'\n    }, {\n      include: '@strings'\n    }, [/[,:;]/, 'delimiter'], [/[{}\\[\\]()]/, '@brackets'], [/@[a-zA-Z_]\\w*/, 'tag'], [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }]],\n    // Deal with white space, including single and multi-line comments\n    whitespace: [[/\\s+/, 'white'], [/(^#.*$)/, 'comment'], [/'''/, 'string', '@endDocString'], [/\"\"\"/, 'string', '@endDblDocString']],\n    endDocString: [[/[^']+/, 'string'], [/\\\\'/, 'string'], [/'''/, 'string', '@popall'], [/'/, 'string']],\n    endDblDocString: [[/[^\"]+/, 'string'], [/\\\\\"/, 'string'], [/\"\"\"/, 'string', '@popall'], [/\"/, 'string']],\n    // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n    numbers: [[/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'], [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']],\n    // Recognize strings, including those broken across lines with \\ (but not without)\n    strings: [[/'$/, 'string.escape', '@popall'], [/'/, 'string.escape', '@stringBody'], [/\"$/, 'string.escape', '@popall'], [/\"/, 'string.escape', '@dblStringBody']],\n    stringBody: [[/[^\\\\']+$/, 'string', '@popall'], [/[^\\\\']+/, 'string'], [/\\\\./, 'string'], [/'/, 'string.escape', '@popall'], [/\\\\$/, 'string']],\n    dblStringBody: [[/[^\\\\\"]+$/, 'string', '@popall'], [/[^\\\\\"]+/, 'string'], [/\\\\./, 'string'], [/\"/, 'string.escape', '@popall'], [/\\\\$/, 'string']]\n  }\n};"],"sourceRoot":""}