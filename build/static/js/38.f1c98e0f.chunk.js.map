{"version":3,"sources":["../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/m3/m3.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","defaultToken","tokenPostfix","token","keywords","reservedConstNames","reservedTypeNames","operators","relations","delimiters","symbols","escapes","tokenizer","root","cases","@keywords","@reservedConstNames","@reservedTypeNames","@default","include","@operators","@relations","@delimiters","text","comment","pragma","whitespace"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAIO,IAAAD,EAAA,CACPE,SAAA,CACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,KACAC,MAAA,MACG,CACHD,KAAA,KACAC,MAAA,MACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,sBACG,CACHF,KAAA,IACAC,MAAA,IACAC,MAAA,wBAGOP,EAAA,CACPQ,aAAA,GACAC,aAAA,MACAN,SAAA,EACAO,MAAA,kBACAL,KAAA,IACAC,MAAA,KACG,CACHI,MAAA,wBACAL,KAAA,IACAC,MAAA,KACG,CACHI,MAAA,mBACAL,KAAA,IACAC,MAAA,MAEAK,SAAA,sdACAC,mBAAA,2OACAC,kBAAA,gJACAC,UAAA,8BACAC,UAAA,qCACAC,WAAA,uBAAuC,MACvCC,QAAA,qBACAC,QAAA,4BACAC,UAAA,CACAC,KAAA,CACA,6CACAC,MAAA,CACAC,YAAA,CACAZ,MAAA,cAEAa,sBAAA,CACAb,MAAA,wBAEAc,qBAAA,CACAd,MAAA,oBAEAe,WAAA,gBAGA,CACAC,QAAA,eACK,cAAO,aACZ,qGACA,aACAL,MAAA,CACAM,aAAA,YACAC,aAAA,YACAC,cAAA,YACAJ,WAAA,aAGA,8GACA,2DACAK,KAAA,sGACAC,QAAA,uEACAC,OAAA,0FACAC,WAAA","file":"static/js/38.f1c98e0f.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  comments: {\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '[',\n    close: ']'\n  }, {\n    open: '{',\n    close: '}'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '(*',\n    close: '*)'\n  }, {\n    open: '<*',\n    close: '*>'\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.m3',\n  brackets: [{\n    token: 'delimiter.curly',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  keywords: ['AND', 'ANY', 'ARRAY', 'AS', 'BEGIN', 'BITS', 'BRANDED', 'BY', 'CASE', 'CONST', 'DIV', 'DO', 'ELSE', 'ELSIF', 'END', 'EVAL', 'EXCEPT', 'EXCEPTION', 'EXIT', 'EXPORTS', 'FINALLY', 'FOR', 'FROM', 'GENERIC', 'IF', 'IMPORT', 'IN', 'INTERFACE', 'LOCK', 'LOOP', 'METHODS', 'MOD', 'MODULE', 'NOT', 'OBJECT', 'OF', 'OR', 'OVERRIDES', 'PROCEDURE', 'RAISE', 'RAISES', 'READONLY', 'RECORD', 'REF', 'REPEAT', 'RETURN', 'REVEAL', 'SET', 'THEN', 'TO', 'TRY', 'TYPE', 'TYPECASE', 'UNSAFE', 'UNTIL', 'UNTRACED', 'VALUE', 'VAR', 'WHILE', 'WITH'],\n  reservedConstNames: ['ABS', 'ADR', 'ADRSIZE', 'BITSIZE', 'BYTESIZE', 'CEILING', 'DEC', 'DISPOSE', 'FALSE', 'FIRST', 'FLOAT', 'FLOOR', 'INC', 'ISTYPE', 'LAST', 'LOOPHOLE', 'MAX', 'MIN', 'NARROW', 'NEW', 'NIL', 'NUMBER', 'ORD', 'ROUND', 'SUBARRAY', 'TRUE', 'TRUNC', 'TYPECODE', 'VAL'],\n  reservedTypeNames: ['ADDRESS', 'ANY', 'BOOLEAN', 'CARDINAL', 'CHAR', 'EXTENDED', 'INTEGER', 'LONGCARD', 'LONGINT', 'LONGREAL', 'MUTEX', 'NULL', 'REAL', 'REFANY', 'ROOT', 'TEXT'],\n  operators: ['+', '-', '*', '/', '&', '^', '.'],\n  relations: ['=', '#', '<', '<=', '>', '>=', '<:', ':'],\n  delimiters: ['|', '..', '=>', ',', ';', ':='],\n  symbols: /[>=<#.,:;+\\-*/&^]+/,\n  escapes: /\\\\(?:[\\\\fnrt\"']|[0-7]{3})/,\n  tokenizer: {\n    root: [// Identifiers and keywords\n    [/_\\w*/, 'invalid'], [/[a-zA-Z][a-zA-Z0-9_]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@reservedConstNames': {\n          token: 'constant.reserved.$0'\n        },\n        '@reservedTypeNames': {\n          token: 'type.reserved.$0'\n        },\n        '@default': 'identifier'\n      }\n    }], // Whitespace\n    {\n      include: '@whitespace'\n    }, [/[{}()\\[\\]]/, '@brackets'], // Integer- and real literals\n    [/[0-9]+\\.[0-9]+(?:[DdEeXx][\\+\\-]?[0-9]+)?/, 'number.float'], [/[0-9]+(?:\\_[0-9a-fA-F]+)?L?/, 'number'], // Operators, relations, and delimiters\n    [/@symbols/, {\n      cases: {\n        '@operators': 'operators',\n        '@relations': 'operators',\n        '@delimiters': 'delimiter',\n        '@default': 'invalid'\n      }\n    }], // Character literals\n    [/'[^\\\\']'/, 'string.char'], [/(')(@escapes)(')/, ['string.char', 'string.escape', 'string.char']], [/'/, 'invalid'], // Text literals\n    [/\"([^\"\\\\]|\\\\.)*$/, 'invalid'], [/\"/, 'string.text', '@text']],\n    text: [[/[^\\\\\"]+/, 'string.text'], [/@escapes/, 'string.escape'], [/\\\\./, 'invalid'], [/\"/, 'string.text', '@pop']],\n    comment: [[/\\(\\*/, 'comment', '@push'], [/\\*\\)/, 'comment', '@pop'], [/./, 'comment']],\n    pragma: [[/<\\*/, 'keyword.pragma', '@push'], [/\\*>/, 'keyword.pragma', '@pop'], [/./, 'keyword.pragma']],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\(\\*/, 'comment', '@comment'], [/<\\*/, 'keyword.pragma', '@pragma']]\n  }\n};"],"sourceRoot":""}