{"version":3,"sources":["../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","identifier","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","defaultToken","tokenPostfix","token","symbols","keywords","namedLiterals","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases","@keywords","@namedLiterals","@default"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAEA,IAMAC,EALA,MAKA,yBALA,MAUOF,EAAA,CACPG,SAAA,CACAC,YAAA,KACAC,aAAA,aAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,MACAC,MAAA,QAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,IACAE,MAAA,sBACG,CACHH,KAAA,MACAC,MAAA,MACAE,MAAA,uBAEAC,gBAAA,gBACAC,iBAAA,CACAC,sBAAA,IAAAC,OAAA,8DACAC,sBAAA,IAAAD,OAAA,4CAGOd,EAAA,CACPgB,aAAA,GACAC,aAAA,SACAZ,SAAA,EACAE,KAAA,IACAC,MAAA,IACAU,MAAA,mBACG,CACHX,KAAA,IACAC,MAAA,IACAU,MAAA,oBACG,CACHX,KAAA,IACAC,MAAA,IACAU,MAAA,0BAEAC,QAAA,sBACAC,SAnEA,sFAoEAC,cAnEA,wBAoEAC,QAAA,0CACAC,UAAA,CACAC,KAAA,EACAC,QAAA,eACK,CACLA,QAAA,gBAEAC,eAAA,EACAC,MAAA,cACAC,OAAA,CACAV,MAAA,WAEK,CACLS,MAAA,MACAC,OAAA,CACAV,MAAA,eACAW,KAAA,UAGAC,cAAA,EACAH,MAAA,OACAC,OAAA,CACAV,MAAA,oBACAW,KAAA,qBAEK,CACLF,MAAA,aACAC,OAAA,CACAV,MAAA,WAEK,CACLS,MAAA,WACAC,OAAA,CACAV,MAAA,kBAEK,CACLS,MAAA,QACAC,OAAA,CACAV,MAAA,0BAEK,CACLS,MAAA,IACAC,OAAA,CACAV,MAAA,SACAW,KAAA,UAGAE,gBAAA,EACAJ,MAAA,IACAC,OAAA,CACAV,MAAA,oBACAW,KAAA,qBAEK,CACLF,MAAA,IACAC,OAAA,CACAV,MAAA,oBACAW,KAAA,SAEK,CACLJ,QAAA,eAEAO,QAAA,EACAL,MAAA,UACAC,OAAA,CACAV,MAAA,YAEK,CACLS,MAAA,SACAC,OAAA,CACAV,MAAA,UACAW,KAAA,SAEK,CACLF,MAAA,SACAC,OAAA,CACAV,MAAA,aAGAe,WAAA,EACAN,MAnJA,gBAoJK,CACLA,MAAA,SACAC,OAAA,CACAV,MAAA,UACAW,KAAA,aAEK,CACLF,MAAA,YACAC,OAAA,CACAV,MAAA,aAGAgB,WAAA,EACAP,MAAA,MACAC,OAAA,CACAV,MAAA,eACAW,KAAA,oBAEK,CACLF,MAAA,IACAC,OAAA,CACAV,MAAA,eACAW,KAAA,mBAEK,CACLF,MA5KA,SA6KAC,OAAA,CACAV,MAAA,WAEK,CACLS,MAAA1B,EACA2B,OAAA,CACAO,MAAA,CACAC,YAAA,CACAlB,MAAA,WAEAmB,iBAAA,CACAnB,MAAA,WAEAoB,WAAA,CACApB,MAAA","file":"static/js/13.b038224c.chunk.js","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar bounded = function bounded(text) {\n  return \"\\\\b\" + text + \"\\\\b\";\n};\n\nvar identifierStart = '[_a-zA-Z]';\nvar identifierContinue = '[_a-zA-Z0-9]';\nvar identifier = bounded(\"\" + identifierStart + identifierContinue + \"*\");\nvar keywords = ['targetScope', 'resource', 'module', 'param', 'var', 'output', 'for', 'in', 'if', 'existing'];\nvar namedLiterals = ['true', 'false', 'null'];\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\nvar numericLiteral = \"[0-9]+\";\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: \"'''\",\n    close: \"'''\"\n  }],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }, {\n    open: \"'''\",\n    close: \"'''\",\n    notIn: ['string', 'comment']\n  }],\n  autoCloseBefore: \":.,=}])' \\n\\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\n    decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.bicep',\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: keywords,\n  namedLiterals: namedLiterals,\n  escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\n  tokenizer: {\n    root: [{\n      include: '@expression'\n    }, {\n      include: '@whitespace'\n    }],\n    stringVerbatim: [{\n      regex: \"(|'|'')[^']\",\n      action: {\n        token: 'string'\n      }\n    }, {\n      regex: \"'''\",\n      action: {\n        token: 'string.quote',\n        next: '@pop'\n      }\n    }],\n    stringLiteral: [{\n      regex: \"\\\\${\",\n      action: {\n        token: 'delimiter.bracket',\n        next: '@bracketCounting'\n      }\n    }, {\n      regex: \"[^\\\\\\\\'$]+\",\n      action: {\n        token: 'string'\n      }\n    }, {\n      regex: '@escapes',\n      action: {\n        token: 'string.escape'\n      }\n    }, {\n      regex: \"\\\\\\\\.\",\n      action: {\n        token: 'string.escape.invalid'\n      }\n    }, {\n      regex: \"'\",\n      action: {\n        token: 'string',\n        next: '@pop'\n      }\n    }],\n    bracketCounting: [{\n      regex: \"{\",\n      action: {\n        token: 'delimiter.bracket',\n        next: '@bracketCounting'\n      }\n    }, {\n      regex: \"}\",\n      action: {\n        token: 'delimiter.bracket',\n        next: '@pop'\n      }\n    }, {\n      include: 'expression'\n    }],\n    comment: [{\n      regex: \"[^\\\\*]+\",\n      action: {\n        token: 'comment'\n      }\n    }, {\n      regex: \"\\\\*\\\\/\",\n      action: {\n        token: 'comment',\n        next: '@pop'\n      }\n    }, {\n      regex: \"[\\\\/*]\",\n      action: {\n        token: 'comment'\n      }\n    }],\n    whitespace: [{\n      regex: nonCommentWs\n    }, {\n      regex: \"\\\\/\\\\*\",\n      action: {\n        token: 'comment',\n        next: '@comment'\n      }\n    }, {\n      regex: \"\\\\/\\\\/.*$\",\n      action: {\n        token: 'comment'\n      }\n    }],\n    expression: [{\n      regex: \"'''\",\n      action: {\n        token: 'string.quote',\n        next: '@stringVerbatim'\n      }\n    }, {\n      regex: \"'\",\n      action: {\n        token: 'string.quote',\n        next: '@stringLiteral'\n      }\n    }, {\n      regex: numericLiteral,\n      action: {\n        token: 'number'\n      }\n    }, {\n      regex: identifier,\n      action: {\n        cases: {\n          '@keywords': {\n            token: 'keyword'\n          },\n          '@namedLiterals': {\n            token: 'keyword'\n          },\n          '@default': {\n            token: 'identifier'\n          }\n        }\n      }\n    }]\n  }\n};"],"sourceRoot":""}