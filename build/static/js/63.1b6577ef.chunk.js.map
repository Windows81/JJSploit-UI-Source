{"version":3,"sources":["../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/scala/scala.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","tokenPostfix","keywords","softKeywords","constants","modifiers","softModifiers","name","type","symbols","digits","hexdigits","escapes","fstring_conv","tokenizer","root","token","bracket","next","cases","@keywords","@softKeywords","@modifiers","@softModifiers","@constants","@default","include","import","allowMethod","->|<-|>:|<:|<%","comment","case","vardef","string","switchTo","stringt","fstring","fstringt","sstring","sstringt","interp","rawstring","rawstringt","whitespace"],"mappings":"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","file":"static/js/63.1b6577ef.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n  /*\r\n   * `...` is allowed as an identifier.\r\n   * $ is allowed in identifiers.\r\n   * unary_<op> is allowed as an identifier.\r\n   * <name>_= is allowed as an identifier.\r\n   */\n  wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))'),\n      end: new RegExp('^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))')\n    }\n  }\n};\nexport var language = {\n  tokenPostfix: '.scala',\n  // We can't easily add everything from Dotty, but we can at least add some of its keywords\n  keywords: ['asInstanceOf', 'catch', 'class', 'classOf', 'def', 'do', 'else', 'extends', 'finally', 'for', 'foreach', 'forSome', 'if', 'import', 'isInstanceOf', 'macro', 'match', 'new', 'object', 'package', 'return', 'throw', 'trait', 'try', 'type', 'until', 'val', 'var', 'while', 'with', 'yield', // Dotty-specific:\n  'given', 'enum', 'then'],\n  // Dotty-specific:\n  softKeywords: ['as', 'export', 'extension', 'end', 'derives', 'on'],\n  constants: ['true', 'false', 'null', 'this', 'super'],\n  modifiers: ['abstract', 'final', 'implicit', 'lazy', 'override', 'private', 'protected', 'sealed'],\n  // Dotty-specific:\n  softModifiers: ['inline', 'opaque', 'open', 'transparent', 'using'],\n  name: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\n  type: /(?:[A-Z][\\w$]*)/,\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\n  digits: /\\d+(_+\\d+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  // C# style strings\n  escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [// strings\n    [/\\braw\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@rawstringt'\n    }], [/\\braw\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@rawstring'\n    }], [/\\bs\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@sstringt'\n    }], [/\\bs\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@sstring'\n    }], [/\\bf\"\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@fstringt'\n    }], [/\\bf\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@fstring'\n    }], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@stringt'\n    }], [/\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@string'\n    }], // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'], [/0[xX](@hexdigits)[Ll]?/, 'number.hex', '@allowMethod'], [/(@digits)[fFdD]/, 'number.float', '@allowMethod'], [/(@digits)[lL]?/, 'number', '@allowMethod'], [/\\b_\\*/, 'key'], [/\\b(_)\\b/, 'keyword', '@allowMethod'], // identifiers and keywords\n    [/\\bimport\\b/, 'keyword', '@import'], [/\\b(case)([ \\t]+)(class)\\b/, ['keyword.modifier', 'white', 'keyword']], [/\\bcase\\b/, 'keyword', '@case'], [/\\bva[lr]\\b/, 'keyword', '@vardef'], [/\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/, ['keyword', 'white', 'identifier']], [/@name(?=[ \\t]*:(?!:))/, 'variable'], [/(\\.)(@name|@symbols)/, ['operator', {\n      token: '@rematch',\n      next: '@allowMethod'\n    }]], [/([{(])(\\s*)(@name(?=\\s*=>))/, ['@brackets', 'white', 'variable']], [/@name/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@softKeywords': 'keyword',\n        '@modifiers': 'keyword.modifier',\n        '@softModifiers': 'keyword.modifier',\n        '@constants': {\n          token: 'constant',\n          next: '@allowMethod'\n        },\n        '@default': {\n          token: 'identifier',\n          next: '@allowMethod'\n        }\n      }\n    }], [/@type/, 'type', '@allowMethod'], // whitespace\n    {\n      include: '@whitespace'\n    }, // @ annotations.\n    [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, 'annotation'], // delimiters and operators\n    [/[{(]/, '@brackets'], [/[})]/, '@brackets', '@allowMethod'], [/\\[/, 'operator.square'], [/](?!\\s*(?:va[rl]|def|type)\\b)/, 'operator.square', '@allowMethod'], [/]/, 'operator.square'], [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, 'keyword'], [/@symbols/, 'operator'], // delimiter: after number because of .\\d floats\n    [/[;,\\.]/, 'delimiter'], // symbols\n    [/'[a-zA-Z$][\\w$]*(?!')/, 'attribute.name'], // characters\n    [/'[^\\\\']'/, 'string', '@allowMethod'], [/(')(@escapes)(')/, ['string', 'string.escape', {\n      token: 'string',\n      next: '@allowMethod'\n    }]], [/'/, 'string.invalid']],\n    import: [[/;/, 'delimiter', '@pop'], [/^|$/, '', '@pop'], [/[ \\t]+/, 'white'], [/[\\n\\r]+/, 'white', '@pop'], [/\\/\\*/, 'comment', '@comment'], [/@name|@type/, 'type'], [/[(){}]/, '@brackets'], [/[[\\]]/, 'operator.square'], [/[\\.,]/, 'delimiter']],\n    allowMethod: [[/^|$/, '', '@pop'], [/[ \\t]+/, 'white'], [/[\\n\\r]+/, 'white', '@pop'], [/\\/\\*/, 'comment', '@comment'], [/(?==>[\\s\\w([{])/, 'keyword', '@pop'], [/(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword',\n          next: '@pop'\n        },\n        '->|<-|>:|<:|<%': {\n          token: 'keyword',\n          next: '@pop'\n        },\n        '@default': {\n          token: '@rematch',\n          next: '@pop'\n        }\n      }\n    }], ['', '', '@pop']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\/\\*/, 'comment', '@push'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    case: [[/\\b_\\*/, 'key'], [/\\b(_|true|false|null|this|super)\\b/, 'keyword', '@allowMethod'], [/\\bif\\b|=>/, 'keyword', '@pop'], [/`[^`]+`/, 'identifier', '@allowMethod'], [/@name/, 'variable', '@allowMethod'], [/:::?|\\||@(?![a-z_$])/, 'keyword'], {\n      include: '@root'\n    }],\n    vardef: [[/\\b_\\*/, 'key'], [/\\b(_|true|false|null|this|super)\\b/, 'keyword'], [/@name/, 'variable'], [/:::?|\\||@(?![a-z_$])/, 'keyword'], [/=|:(?!:)/, 'operator', '@pop'], [/$/, 'white', '@pop'], {\n      include: '@root'\n    }],\n    string: [[/[^\\\\\"\\n\\r]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }]],\n    stringt: [[/[^\\\\\"\\n\\r]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"(?=\"\"\")/, 'string'], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\"/, 'string']],\n    fstring: [[/@escapes/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\\$\\$/, 'string'], [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']], [/\\$\\{/, 'operator', '@interp'], [/%%/, 'string'], [/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'keyword.modifier', 'number', 'metatag']], [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']], [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']], [/(%)(@fstring_conv)/, ['metatag', 'metatag']], [/./, 'string']],\n    fstringt: [[/@escapes/, 'string.escape'], [/\"(?=\"\"\")/, 'string'], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\\$\\$/, 'string'], [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']], [/\\$\\{/, 'operator', '@interp'], [/%%/, 'string'], [/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'keyword.modifier', 'number', 'metatag']], [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']], [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']], [/(%)(@fstring_conv)/, ['metatag', 'metatag']], [/./, 'string']],\n    sstring: [[/@escapes/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\\$\\$/, 'string'], [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']], [/\\$\\{/, 'operator', '@interp'], [/./, 'string']],\n    sstringt: [[/@escapes/, 'string.escape'], [/\"(?=\"\"\")/, 'string'], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\\$\\$/, 'string'], [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']], [/\\$\\{/, 'operator', '@interp'], [/./, 'string']],\n    interp: [[/{/, 'operator', '@push'], [/}/, 'operator', '@pop'], {\n      include: '@root'\n    }],\n    rawstring: [[/[^\"]/, 'string'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }]],\n    rawstringt: [[/[^\"]/, 'string'], [/\"(?=\"\"\")/, 'string'], [/\"\"\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      switchTo: '@allowMethod'\n    }], [/\"/, 'string']],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};"],"sourceRoot":""}