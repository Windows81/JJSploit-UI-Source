{"version":3,"sources":["../../../../Documents/GitHub/JJSploit/client/node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","_fillers_monaco_editor_core_js__WEBPACK_IMPORTED_MODULE_0__","EMPTY_ELEMENTS","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","IndentAction","IndentOutdent","Indent","defaultToken","tokenPostfix","tokenizer","root","token","switchTo","next","doctype","comment","commentBlock","commentHtml","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","handlebarsInSimpleState","include","handlebarsInEmbeddedState","handlebarsRoot"],"mappings":"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","file":"static/js/27.2ddebd2c.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n  comments: {\n    blockComment: ['{{!--', '--}}']\n  },\n  brackets: [['<!--', '-->'], ['<', '>'], ['{{', '}}'], ['{', '}'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '<',\n    close: '>'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  onEnterRules: [{\n    beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n    afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n    action: {\n      indentAction: languages.IndentAction.IndentOutdent\n    }\n  }, {\n    beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n    action: {\n      indentAction: languages.IndentAction.Indent\n    }\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '',\n  // ignoreCase: true,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/\\{\\{!--/, 'comment.block.start.handlebars', '@commentBlock'], [/\\{\\{!/, 'comment.start.handlebars', '@comment'], [/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.root'\n    }], [/<!DOCTYPE/, 'metatag.html', '@doctype'], [/<!--/, 'comment.html', '@commentHtml'], [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']], [/(<)(script)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@script'\n    }]], [/(<)(style)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@style'\n    }]], [/(<)([:\\w]+)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@otherTag'\n    }]], [/(<\\/)(\\w+)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@otherTag'\n    }]], [/</, 'delimiter.html'], [/\\{/, 'delimiter.html'], [/[^<{]+/] // text\n    ],\n    doctype: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.comment'\n    }], [/[^>]+/, 'metatag.content.html'], [/>/, 'metatag.html', '@pop']],\n    comment: [[/\\}\\}/, 'comment.end.handlebars', '@pop'], [/./, 'comment.content.handlebars']],\n    commentBlock: [[/--\\}\\}/, 'comment.block.end.handlebars', '@pop'], [/./, 'comment.content.handlebars']],\n    commentHtml: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.comment'\n    }], [/-->/, 'comment.html', '@pop'], [/[^-]+/, 'comment.content.html'], [/./, 'comment.content.html']],\n    otherTag: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.otherTag'\n    }], [/\\/?>/, 'delimiter.html', '@pop'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/] // whitespace\n    ],\n    // -- BEGIN <script> tags handling\n    // After <script\n    script: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.script'\n    }], [/type/, 'attribute.name', '@scriptAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', {\n      token: 'delimiter.html',\n      next: '@pop'\n    }]]],\n    // After <script ... type\n    scriptAfterType: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.scriptAfterType'\n    }], [/=/, 'delimiter', '@scriptAfterTypeEquals'], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type =\n    scriptAfterTypeEquals: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals'\n    }], [/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.text/javascript',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type = $S2\n    scriptWithCustomType: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    scriptEmbedded: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2',\n      nextEmbedded: '@pop'\n    }], [/<\\/script/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }]],\n    // -- END <script> tags handling\n    // -- BEGIN <style> tags handling\n    // After <style\n    style: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.style'\n    }], [/type/, 'attribute.name', '@styleAfterType'], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', {\n      token: 'delimiter.html',\n      next: '@pop'\n    }]]],\n    // After <style ... type\n    styleAfterType: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.styleAfterType'\n    }], [/=/, 'delimiter', '@styleAfterTypeEquals'], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type =\n    styleAfterTypeEquals: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.styleAfterTypeEquals'\n    }], [/\"([^\"]*)\"/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.text/css',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type = $S2\n    styleWithCustomType: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value'], [/'([^']*)'/, 'attribute.value'], [/[\\w\\-]+/, 'attribute.name'], [/=/, 'delimiter'], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    styleEmbedded: [[/\\{\\{/, {\n      token: '@rematch',\n      switchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2',\n      nextEmbedded: '@pop'\n    }], [/<\\/style/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }]],\n    // -- END <style> tags handling\n    handlebarsInSimpleState: [[/\\{\\{\\{?/, 'delimiter.handlebars'], [/\\}\\}\\}?/, {\n      token: 'delimiter.handlebars',\n      switchTo: '@$S2.$S3'\n    }], {\n      include: 'handlebarsRoot'\n    }],\n    handlebarsInEmbeddedState: [[/\\{\\{\\{?/, 'delimiter.handlebars'], [/\\}\\}\\}?/, {\n      token: 'delimiter.handlebars',\n      switchTo: '@$S2.$S3',\n      nextEmbedded: '$S3'\n    }], {\n      include: 'handlebarsRoot'\n    }],\n    handlebarsRoot: [[/\"[^\"]*\"/, 'string.handlebars'], [/[#/][^\\s}]+/, 'keyword.helper.handlebars'], [/else\\b/, 'keyword.helper.handlebars'], [/[\\s]+/], [/[^}]/, 'variable.parameter.handlebars']]\n  }\n};"],"sourceRoot":""}